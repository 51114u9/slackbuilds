#!/bin/sh

# Copyright 2012 Marco Antonio Frias B., Cochabamba, BO
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# NOTE:
#
# This script can be run directly from a root command shell, using:
#
# # /etc/rc.d/rc.PROGRAM start
# or
# # /etc/rc.d/rc.PROGRAM stop
#
# For automatic startup, it should be added to /etc/rc.d/rc.local
#
# if [ -x /etc/rc.d/rc.PROGRAM ]; then
#   /etc/rc.d/rc.PROGRAM start
# fi
#
# For automatic shutdown, it should be added to /etc/rc.d/rc.local_shutdown
#
# if [ -x /etc/rc.d/rc.PROGRAM ]; then
#   /etc/rc.d/rc.PROGRAM stop
# fi
#

DAEMON=
CFGFILE=
PIDFILE=
PID=-1

# Only start if we can find the daemon
if [ ! -x $DAEMON ] ; then
  echo "PROGRAM is not installed correctly." >&2
  exit 1
fi

check_run() {
  if [ -f "$PIDFILE" ]; then
    read LINE < "$PIDFILE"
    [ -z "${LINE//[0-9]/}" -a -d "/proc/$LINE" ] && PID="$LINE"
    if [ -n "$PID" ]; then
      return 0
    fi
    return 1 # PROGRAM is dead and /var/run pid file exists
  fi
  return 3 # PROGRAM is not running
}

start() {
  # See if it's already running. Look *only* at the pid file
  check_run
  case $? in
   0)
    echo "PROGRAM (pid $PID) is running..."
    exit 0
    ;;
   1)
    echo "PROGRAM is dead but pid file exists..."
    exit 1
    ;;
  esac

  echo -n "Starting PROGRAM: "

  if [ $? -eq 0 ]; then
    echo "ok"
  else
    echo "failed"
  fi
}

stop() {
  # See if it's already running. Look *only* at the pid file
  check_run
  case $? in
   1)
    echo "PROGRAM is dead but pid file exists..."
    exit 1
    ;;
   3)
    echo "PROGRAM is not running..."
    exit 0
    ;;
  esac

  echo -n "Shutting down PROGRAM: "

  if [ $? -eq 0 ]; then
    echo "ok"
  else
    echo "failed"
  fi
}

restart() {
  stop
  sleep 1
  start
}

reload() {
  # See if it's already running. Look *only* at the pid file
  check_run
  case $? in
   1)
    echo "PROGRAM is dead but pid file exists..."
    exit 1
    ;;
   3)
    echo "PROGRAM is not running..."
    exit 0
    ;;
  esac

  echo -n "Reloading PROGRAM: "

  if [ $? -eq 0 ]; then
    echo "ok"
  else
    echo "failed"
  fi
}

status() {
  # See if it's already running. Look *only* at the pid file
  check_run
  case "$?" in
   0)
    echo "PROGRAM (pid $PID) is running..."
    exit 0
    ;;
   1)
    echo "PROGRAM is dead but pid file exists..."
    exit 1
    ;;
   3)
    echo "PROGRAM is not running..."
    exit 0
    ;;
  esac
}

# Parse command line parameters
case $1 in
start)
  start
  ;;
stop)
  stop
  ;;
restart)
  restart
  ;;
reload)
  reload
  ;;
status)
  status
  ;;
*)
  # Print help
  echo "Usage: $0 {start|stop|restart|reload|status}" 1>&2
  exit 1
  ;;
esac

exit 0
