
Tomcat Native
-------------

This adds native 32b/64b code to enhance performance in production
environments. This will remove the following warning in catalina.err:

  INFO: The APR based Apache Tomcat Native library which allows optimal
  performance in production environments was not found on the
  java.library.path [...]

########################################################################

Filesystem hierarchy
--------------------

/usr/share/apache-tomcat

  Main Tomcat folder containing scripts and links to other directories

/usr/share/apache-tomcat/lib

  Tomcat Java libraries (jars)

/etc/apache-tomcat

  Configuration files. Among some:
  
  + tomcat-users.xml: defines users allowed to use admin tools and their roles
  + server.xml: Main Tomcat configuration file
  + catalina.policy: security policies configuration file

  Use /etc/apache-tomcat/tomcat-java.conf file to set the JVM you want
  Tomcat to be run with, options to pass to Tomcat through the environment
  variable CATALINA_OPTS

/etc/rc.d/rc.tomcat

  Start/stop daemon script

/var/log/apache-tomcat

  Log files:

  + catalina.err: startup log
  + catalina.out: output from stdout
  + others are access logs and
  + business logs defined in /etc/apache-tomcat/server.xml as Valve

/var/lib/apache-tomcat/webapps

  Where Tomcat deploys your web applications

/var/cache/apache-tomcat

  Where Tomcat store your webapps data

########################################################################

Tomcat Users
------------

With Tomcat 7, there are now 4 built-in roles that allow administrators
to delegate access to specific accounts so that they can only do certain
things, like view stats and not deploy apps. The four roles are named:
manager-gui, manager-script, manager-jmx, and manager-status.

*manager-gui*

  manager-gui provides access to the status pages and the tomcat manager
  web console.  Accounts with this level of access can do anything
  through the traditional tomcat manager web console. This includes
  deploying/undeploying apps, viewing stats, generating leak detection
  diagnostics, expiring sessions, etc.

*manager-script*

  manager-script, provides all the functionality that manager-gui
  provides but using the text interface instead of the html gui. A savvy
  scripter using curl or some perl/groovy/java/ruby/powershell/python/
  etc., scripts can do anything that a user with a web browser can do
  with the tomcat manager HTML console. If you are an app server
  administrator who loves the command-line, the manager-script role is
  for you. One item to note is that the context path for the text
  interface has changed in Tomcat 7 so existing scripts may need to be
  reworked.

*manager-jmx*

  manager-jmx provides access to the jmxproxy, which is something
  monitoring tools & scripts, administrators, and developers may find
  useful. In addition, this role also has access to the status pages. 
  Existing scripts should work as-is because, unlike the text interface,
  the context path for the jmxproxy has not changed.

*manager-status*

  manager-status provides the users assigned to that role with access to
  the statistics that tomcat provides like current threads, max threads,
  etc. Users belonging to this role will be able to access the Status
  link on the main tomcat index page but will receive a 403 - Access
  Denied when attempting to access the Tomcat Manager.

All roles provide access to the status pages.  

There are two roles, "admin-gui" and "admin-script":

*admin-gui*

  admin-gui role provides access to the host-manager HTML console.

*admin-script*

  admin-script role provides access to the host-manager text interface.

Both admin roles provide access to the status pages.

########################################################################

Security configuration
----------------------

This page gives the bare minimum to get your first web application to
run on Tomcat. It is not intended to be the definitive guide to
administering Tomcat (it is a job of its own). The official Tomcat
website will provide all necessary official matter. One could also refer
to this O'Reilly page (http://oreilly.com/java/archive/tomcat-tips.html)
and this last one (http://www.unidata.ucar.edu/projects/THREDDS/tech/reference/TomcatSecurity.html). 
Still, here are some security tips to get you started: 

  + Keep your Tomcat installation up to date to get the latest fixes to
    security issues

  + Remove unwanted default applications such as examples, docs, default
    home page ROOT ("_" in the manager webapp). This prevents potential
    security holes to be exploited. Use the manager for that. 

  + Disable the WAR auto-deploy option. This would prevent someone who
    gained restricted access to the server to copy a WAR into the
    /var/lib/apache-tomcat/webapps directory to get it running.

    Edit /etc/apache-tomcat/server.xml and set the autoDeploy to false: 

      <Host name="localhost"  appBase="webapps"
            unpackWARs="true" autoDeploy="true">

  + Anonymize Tomcat's default error page to prevent potential attackers
    to retrieve Tomcat's version. To see what Tomcat says by default,
    just visit an nonexistent page such as http://localhost:8080/I_dont_exist.
    You get a 404 error page with Tomcat's version at the bottom. 

    To anonymize this, edit/open  the following JAR:

      /usr/share/tomcat7/lib/catalina.jar

    And edit the following file:

      org/apache/catalina/util/ServerInfo.properties

       ...
       server.info=
       server.number=
       server.built=
       ...

  + Disable unused connectors in server.xml

  + Keep restricted access to /etc/apache-tomcat/server.xml. Only tomcat
    user and/or root should be able to read and write this.

  + Use strong different passwords for each user in tomcat-users.xml,
    give roles to users who really need them and even disable usernames/
    roles you do not use/need.

    One can even crypt tomcat-users.xml passwords using the following
    upstream script:

      /usr/share/apache-tomcat/bin/digest.sh -a SHA NEW_PASSWORD

    This will output something like:

      NEW_PASSWORD:b7bbb48a5b7749f1f908eb3c0c021200c72738ce

    Paste the hashed part in place of the clear password in
    tomcat-users.xml and add the following to server.xml:

      /etc/tomcat7/server.xml

      <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
             resourceName="UserDatabase"
             digest="SHA" />

  + Always know what you are deploying

########################################################################

Tuning the JVM
--------------

CATALINA_OPTS is used to control Tomcat environment options. You can:
increase heap memory available to the JVM, increase java thread stack
size, add in a -server to switch from the client (quicker start, slower
running) to the server (slower starting, quicker running) JVM, and more.

General Options:

-Xms and -Xmx

  Used to define the size of the heap used by the JVM. -Xms defines the
  initial and -Xmx defines the maximum size of the heap.

  "heap" is where the JVM stores the object instances used by an
  application.

  Is recommended that the initial and maximum values for heap size be
  set to the same value. This is often referred to as a fully committed
  heap and this will instruct the JVM to create a heap that is initially
  at its maximum size and prevent several full garbage collections from
  occurring as the heap expands to its maximum size.

-XX:MaxPermSize

  Used to define the size of the permanent generation space.
  -XX:MaxPermSize defines the maximum value.

  "PermGen" or permanent generation, refers to the location in memory
  where the JVM stores the class files that have been loaded into memory.

  Is recommended that the initial and maximum values for the size of the
  permanent generation be set to the same value. This will instruct the
  JVM to create the permanent generation so that it is initially at its
  maximum size and prevent possible full garbage collections from
  occurring as the permanent generation expands to its maximum size.

-Xss

  This setting determines the size of the stack for each thread in the 
  JVM.

  This value can be lowered, saving memory and increasing the number of
  threads that can be run on a system. The easiest way to determine a
  value for your system is to start out with a very low value, for
  example 128k. Then run Tomcat and look for a StackOverFlow exception
  in the logs. If you see the exception, then gradually increase the
  value and restart Tomcat. When the exceptions disappear, you have
  found the minimal value which works for your deployment.

Sample:

CATALINA_OPTS="-Xms512m -Xmx1024m -XX:MaxPermSize=512m -Xss256k"

###

Sources:

 http://blog.techstacks.com/2010/07/new-manager-roles-in-tomcat-7-are-wonderful.html
 https://wiki.archlinux.org/index.php/Tomcat
 http://www.tomcatexpert.com/blog/2011/11/22/performance-tuning-jvm-running-tomcat
